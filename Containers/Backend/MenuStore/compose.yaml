# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "app".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
#version: 'latest'



services:
  db:
    image: mysql:5.7
    platform: linux/x86_64
    restart: always
    environment:
      MYSQL_DATABASE: 'db'
      MYSQL_ROOT_PASSWORD: 'burger'
      # So you don't have to use root, but you can if you like
      #MYSQL_USER: 'user'
      # You can use whatever password you like
      #MYSQL_PASSWORD: 'password'
      # Password for root access
      
    ports:
      # <Port exposed> : <MySQL Port running inside container>
      - '3306:3306'
    #expose:
      # Opens port 3306 on the container
      #- '3306'
      # Where our data will be persisted
    volumes:
      - my-db:/var/lib/mysql:rw
      #- ./docker/mysql/data:/var/lib/mysql:rw
      - ./MenuStoreDB.sql:/docker-entrypoint-initdb.d/MenuStoreDB.sql
      #- ./MenuStoreDB:/docker-entrypoint-initdb.d
      #./:/vol
#    image: mysql:latest
#    container_name: MenuStoreContainer
#    ports: 
#      - 3307:3306
#    restart: always
#    environment:
#      MYSQL_ROOT_PASSWORD: burger
#      MYSQL_DATABASE: db
#    volumes:
      #- db:/var/lib/mysql
      #- ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      #- burger-db:/var/lib/mysql
      #- ./db.sql:/docker-entrypoiont-initdb.d/init.sql
#      - ./:/vol
    #build:
    #  context: .
    #  dockerfile: docker_db

  phpmyadmin:
    image: linuxserver/phpmyadmin
    restart: always
    ports:
      - 8077:80
    environment:
      ports: 8077:80
    depends_on:
      - db
volumes:
  my-db:
  #burger-db
#  db:
#    driver: local
  #app:
  #  build:
  #    context: .
  #    target: final
  #    db:

    # If your application exposes a port, uncomment the following lines and change
    # the port numbers as needed. The first number is the host port and the second
    # is the port inside the container.
    # ports:
    #   - 8080:8080

    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.
    #     depends_on:
    #       db:
    #         condition: service_healthy
    #   db:
    #     image: postgres
    #     restart: always
    #     user: postgres
    #     secrets:
    #       - db-password
    #     volumes:
    #       - db-data:/var/lib/postgresql/data
    #     environment:
    #       - POSTGRES_DB=example
    #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    #     expose:
    #       - 5432
    #     healthcheck:
    #       test: [ "CMD", "pg_isready" ]
    #       interval: 10s
    #       timeout: 5s
    #       retries: 5
    # volumes:
    #   db-data:
    # secrets:
    #   db-password:
    #     file: db/password.txt
